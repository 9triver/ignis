syntax = "proto3";
package proto;
option go_package = "github.com/9triver/ignis/proto";

import "actor.proto";

// Language of supported object
enum Language {
  LANG_UNKNOWN = 0;
  LANG_JSON = 1; // Values that can be represented as JSON string, can be encoded/decoded
  LANG_GO = 2; // Values that are only compatible with Go actors.
  LANG_PYTHON = 3; // Values that are only compatible with Python actors.
}

// ObjectRequest requests object with ID, and the object is sent to ReplyTo, asynchronously.
message ObjectRequest {
  string ID = 1;
  actor.PID ReplyTo = 2;
}

// EncodedObject stores a byte encoded object
message EncodedObject {
  string ID = 1; // if returned from ipc call, id won't be set
  bytes Data = 2; // serialized object data, or nil if current object is a stream
  actor.PID Source = 3; // points to store actor of the object.
  Language Language = 4; // if is JSON, it can be decoded to either Go, Python, or else it can only be decoded to corresponding language.
  bool Stream = 5;
}

// Flow is reference to real object or stream
message Flow {
  string ObjectID = 1; // ID of referenced object or stream
  actor.PID Source = 2; // points to store actor of a single worker.
}

message StreamRequest {
  string StreamID = 1;
  actor.PID ReplyTo = 2;
}

message StreamChunk {
  string StreamID = 1;
  EncodedObject Object = 2;
}

message EndOfStream {
  string StreamID = 1; // ID of requested stream
}

// Generic Error message for platform
message Error {
  actor.PID Sender = 1;
  string Message = 2;
}

message Ack {
  actor.PID Sender = 1;
}

message Successor {
  string ID = 1;
  string Param = 2;
  actor.PID PID = 3;
}

message AppendSuccessors {
  repeated Successor Successors = 1;
}

// Invoke is sent to a dag node for workflow execution.
message Invoke {
  string SessionID = 1;
  string Param = 2;
  Flow Value = 3;
  string Error = 4;
}

// InvokeEmpty is sent to entry nodes of the dag.
message InvokeEmpty {}

// CreateSession is sent to the actor to create a new session.
message CreateSession {
  string SessionID = 1;
  repeated Successor Successors = 2;
}
